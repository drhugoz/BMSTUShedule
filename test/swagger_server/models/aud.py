# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Aud(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, number: str=None, location: str=None):  # noqa: E501
        """Aud - a model defined in Swagger

        :param number: The number of this Aud.  # noqa: E501
        :type number: str
        :param location: The location of this Aud.  # noqa: E501
        :type location: str
        """
        self.swagger_types = {
            'number': str,
            'location': str
        }

        self.attribute_map = {
            'number': 'number',
            'location': 'location'
        }

        self._number = number
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'Aud':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Aud of this Aud.  # noqa: E501
        :rtype: Aud
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self) -> str:
        """Gets the number of this Aud.


        :return: The number of this Aud.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number: str):
        """Sets the number of this Aud.


        :param number: The number of this Aud.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def location(self) -> str:
        """Gets the location of this Aud.


        :return: The location of this Aud.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Aud.


        :param location: The location of this Aud.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location
