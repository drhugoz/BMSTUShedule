# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DoctorSchedule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, spec: str=None, aud: str=None, stage: int=None, faculty: List[str]=None, schedule: List[str]=None):  # noqa: E501
        """DoctorSchedule - a model defined in Swagger

        :param name: The name of this DoctorSchedule.  # noqa: E501
        :type name: str
        :param spec: The spec of this DoctorSchedule.  # noqa: E501
        :type spec: str
        :param aud: The aud of this DoctorSchedule.  # noqa: E501
        :type aud: str
        :param stage: The stage of this DoctorSchedule.  # noqa: E501
        :type stage: int
        :param faculty: The faculty of this DoctorSchedule.  # noqa: E501
        :type faculty: List[str]
        :param schedule: The schedule of this DoctorSchedule.  # noqa: E501
        :type schedule: List[str]
        """
        self.swagger_types = {
            'name': str,
            'spec': str,
            'aud': str,
            'stage': int,
            'faculty': List[str],
            'schedule': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'spec': 'spec',
            'aud': 'aud',
            'stage': 'stage',
            'faculty': 'faculty',
            'schedule': 'schedule'
        }

        self._name = name
        self._spec = spec
        self._aud = aud
        self._stage = stage
        self._faculty = faculty
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt) -> 'DoctorSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DoctorSchedule of this DoctorSchedule.  # noqa: E501
        :rtype: DoctorSchedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DoctorSchedule.


        :return: The name of this DoctorSchedule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DoctorSchedule.


        :param name: The name of this DoctorSchedule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def spec(self) -> str:
        """Gets the spec of this DoctorSchedule.


        :return: The spec of this DoctorSchedule.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec: str):
        """Sets the spec of this DoctorSchedule.


        :param spec: The spec of this DoctorSchedule.
        :type spec: str
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")  # noqa: E501

        self._spec = spec

    @property
    def aud(self) -> str:
        """Gets the aud of this DoctorSchedule.


        :return: The aud of this DoctorSchedule.
        :rtype: str
        """
        return self._aud

    @aud.setter
    def aud(self, aud: str):
        """Sets the aud of this DoctorSchedule.


        :param aud: The aud of this DoctorSchedule.
        :type aud: str
        """
        if aud is None:
            raise ValueError("Invalid value for `aud`, must not be `None`")  # noqa: E501

        self._aud = aud

    @property
    def stage(self) -> int:
        """Gets the stage of this DoctorSchedule.


        :return: The stage of this DoctorSchedule.
        :rtype: int
        """
        return self._stage

    @stage.setter
    def stage(self, stage: int):
        """Sets the stage of this DoctorSchedule.


        :param stage: The stage of this DoctorSchedule.
        :type stage: int
        """
        if stage is None:
            raise ValueError("Invalid value for `stage`, must not be `None`")  # noqa: E501

        self._stage = stage

    @property
    def faculty(self) -> List[str]:
        """Gets the faculty of this DoctorSchedule.


        :return: The faculty of this DoctorSchedule.
        :rtype: List[str]
        """
        return self._faculty

    @faculty.setter
    def faculty(self, faculty: List[str]):
        """Sets the faculty of this DoctorSchedule.


        :param faculty: The faculty of this DoctorSchedule.
        :type faculty: List[str]
        """

        self._faculty = faculty

    @property
    def schedule(self) -> List[str]:
        """Gets the schedule of this DoctorSchedule.


        :return: The schedule of this DoctorSchedule.
        :rtype: List[str]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: List[str]):
        """Sets the schedule of this DoctorSchedule.


        :param schedule: The schedule of this DoctorSchedule.
        :type schedule: List[str]
        """

        self._schedule = schedule
