# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, _from: str=None, to: str=None, location: str=None, type: str=None, professor: str=None):  # noqa: E501
        """ModelClass - a model defined in Swagger

        :param name: The name of this ModelClass.  # noqa: E501
        :type name: str
        :param _from: The _from of this ModelClass.  # noqa: E501
        :type _from: str
        :param to: The to of this ModelClass.  # noqa: E501
        :type to: str
        :param location: The location of this ModelClass.  # noqa: E501
        :type location: str
        :param type: The type of this ModelClass.  # noqa: E501
        :type type: str
        :param professor: The professor of this ModelClass.  # noqa: E501
        :type professor: str
        """
        self.swagger_types = {
            'name': str,
            '_from': str,
            'to': str,
            'location': str,
            'type': str,
            'professor': str
        }

        self.attribute_map = {
            'name': 'name',
            '_from': 'from',
            'to': 'to',
            'location': 'location',
            'type': 'type',
            'professor': 'professor'
        }

        self._name = name
        self.__from = _from
        self._to = to
        self._location = location
        self._type = type
        self._professor = professor

    @classmethod
    def from_dict(cls, dikt) -> 'ModelClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Class of this ModelClass.  # noqa: E501
        :rtype: ModelClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ModelClass.


        :return: The name of this ModelClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ModelClass.


        :param name: The name of this ModelClass.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def _from(self) -> str:
        """Gets the _from of this ModelClass.


        :return: The _from of this ModelClass.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this ModelClass.


        :param _from: The _from of this ModelClass.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this ModelClass.


        :return: The to of this ModelClass.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this ModelClass.


        :param to: The to of this ModelClass.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def location(self) -> str:
        """Gets the location of this ModelClass.


        :return: The location of this ModelClass.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this ModelClass.


        :param location: The location of this ModelClass.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def type(self) -> str:
        """Gets the type of this ModelClass.


        :return: The type of this ModelClass.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ModelClass.


        :param type: The type of this ModelClass.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def professor(self) -> str:
        """Gets the professor of this ModelClass.


        :return: The professor of this ModelClass.
        :rtype: str
        """
        return self._professor

    @professor.setter
    def professor(self, professor: str):
        """Sets the professor of this ModelClass.


        :param professor: The professor of this ModelClass.
        :type professor: str
        """

        self._professor = professor
